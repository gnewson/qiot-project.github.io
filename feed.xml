<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-01-01T00:59:35+00:00</updated><id>/feed.xml</id><title type="html">QIoT project</title><subtitle>Quarkus meets Internet of Things</subtitle><entry><title type="html">Install RHEL for Edge on Compulab Fitlet2</title><link href="/blog/rhel-on-fitlet2/" rel="alternate" type="text/html" title="Install RHEL for Edge on Compulab Fitlet2" /><published>2021-10-13T00:00:00+00:00</published><updated>2021-10-13T00:00:00+00:00</updated><id>/blog/rhel-on-fitlet2</id><content type="html" xml:base="/blog/rhel-on-fitlet2/">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel0&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#preparation&quot;&gt;Preparation&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#fix-system-time&quot;&gt;Fix system time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#turn-off-secure-boot&quot;&gt;Turn off Secure Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tune-the-boot-order-priorities&quot;&gt;Tune the Boot Order Priorities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bootable-iso&quot;&gt;Bootable ISO&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#download&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-bootable-usb-stick&quot;&gt;Create a bootable USB-Stick&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#on-linux&quot;&gt;On Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#on-windows&quot;&gt;On Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#boot-the-fitlet-over-the-internet&quot;&gt;Boot the Fitlet over the Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#get-access-to-the-fitlet2&quot;&gt;Get Access to the Fitlet2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;introduction&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next guide will show how to deploy RHEL for Edge to a physical miniature PC &lt;a href=&quot;https://fit-iot.com/web/products/fitlet2/&quot;&gt;Fitlet2&lt;/a&gt; manufactured by Compulab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution of RHEL for Edge uses ostree to manage the packages to install on the device. Ostree is both a shared library and suite of command line tools that combines a “git-like” model for committing and downloading bootable filesystem trees, along with a layer for deploying them and managing the bootloader configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this use case we are providing a web server with the kickstart file required to start the installation, and hosting the repo with the required packages for this distribution, but we also provide the how to create your own from scratch with the tool image-builder available at the standard RHEL 8 distribution.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;hardware&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hardware&quot;&gt;&lt;/a&gt;Hardware&lt;/h1&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Model name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;fitlet2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU model name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Intel&amp;#174; Atom x5-E3930 [CE3930]&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Memory capacity&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.00 GiB&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/rhel-on-fitlet2/fitlet2.png&quot; alt=&quot;fitlet2&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;preparation&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#preparation&quot;&gt;&lt;/a&gt;Preparation&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Connect a USB-Keyboard and a Monitor to the Fitlet2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Switch the Device on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should automatically enter the BIOS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If not, press “canc” during boot to enter the BIOS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fix-system-time&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fix-system-time&quot;&gt;&lt;/a&gt;Fix system time&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If necessary, adjust the Time and Date of the Machine. Use the &lt;strong&gt;UTC Timezone&lt;/strong&gt; !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the BIOS clock is way off, your Web-based Kickstart will fail with an SSL-Error (see further below)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/rhel-on-fitlet2/img01.jpg&quot; alt=&quot;img01&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;turn-off-secure-boot&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#turn-off-secure-boot&quot;&gt;&lt;/a&gt;Turn off Secure Boot&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Switch to the &lt;strong&gt;&quot;Security&quot;&lt;/strong&gt; tab of the Fitlet2 BIOS and select &lt;em&gt;&quot;Disabled&quot;&lt;/em&gt; for the Secure Boot option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/rhel-on-fitlet2/img02.jpg&quot; alt=&quot;img02&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tune-the-boot-order-priorities&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tune-the-boot-order-priorities&quot;&gt;&lt;/a&gt;Tune the Boot Order Priorities&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Switch to the &lt;strong&gt;&quot;Boot&quot;&lt;/strong&gt; tab of the Fitlet2 BIOS and Adjust the boot order to boot &lt;em&gt;“HDD”&lt;/em&gt; (&lt;strong&gt;not&lt;/strong&gt; SD) first and then “USB Key” and “USB CD/DVD”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the Installation your OS will appear as First UEFI HDD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your system does not correctly boot into RHEL gor Edge after the Installation, please come back into the system BIOS and correct the Boot Order accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/rhel-on-fitlet2/img03.jpg&quot; alt=&quot;img03&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;bootable-iso&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bootable-iso&quot;&gt;&lt;/a&gt;Bootable ISO&lt;/h1&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;download&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#download&quot;&gt;&lt;/a&gt;Download&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download a Red Hat Boot ISO image from the Red Hat Customer Portal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Red Hat Boot ISO image is used to launch the RHEL installer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The installer fetches the Kickstart file that you provide for installing RHEL for Edge images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open a browser and access &lt;a href=&quot;https://access.redhat.com/downloads&quot; class=&quot;bare&quot;&gt;https://access.redhat.com/downloads&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the Red Hat Enterprise Linux 8.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the button Download Now for the option &quot;Red Hat Enterprise Linux 8.x Boot ISO&quot; (8.4 at the time of this article).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about downloading Boot.iso image, see &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/performing_a_standard_rhel_installation/index#downloading-beta-installation-images_preparing-for-your-installation&quot;&gt;Downloading the installation ISO image&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-a-bootable-usb-stick&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-a-bootable-usb-stick&quot;&gt;&lt;/a&gt;Create a bootable USB-Stick&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Time to flash the downloaded ISO image on a USB drive. The minimum space required for the UDB Flash drive is 1Gb.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a side note, please keep in mind the partition resultant from the flash operation will be marked as read-only, as the ISO image we are about to flash is a DVD image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;on-linux&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#on-linux&quot;&gt;&lt;/a&gt;On Linux&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s check the path of the device with&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;sudo fdisk -l&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You need to identify the path of type /dev/sdN, in my case is /dev/sda if yours takes another path, replace it in the next step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start the flashing process type&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;dd if=rhel-8.4-x86_64-boot.iso of=&amp;lt;devicename&amp;gt; status=progress&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;as root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt; make absolutely sure, that the given device name is in fact the USB-Stick. If you accidentally type in your root-disk, it&amp;#8217;ll be overwritten!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;on-windows&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#on-windows&quot;&gt;&lt;/a&gt;On Windows&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Windows, use the free tool &lt;a href=&quot;https://rufus.ie/en/&quot;&gt;Rufus&lt;/a&gt; to create a bootable USB-Stick.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;boot-the-fitlet-over-the-internet&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#boot-the-fitlet-over-the-internet&quot;&gt;&lt;/a&gt;Boot the Fitlet over the Internet&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Connect a Keyboard and a Monitor (HDMI) to the Fitlet2 Device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Put the bootable USB-Key and a blank Micro-SD-Card into the Fitlet2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Connect a Network Cable. Setup using WiFi is not supported at this time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt; The Micro SD-card will be overwritten by the installation process without further warning!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Turn on the Fitlet2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If it does not boot from the USB-Key, enter the BIOS-Setup and check for the following settings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Turn OFF secure Boot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the Boot order, that the USB-Stick comes first followed by &quot;SD&quot; and &quot;HDD&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the System boots from the USB-Stick, you&amp;#8217;ll see the RHEL-8-Install Prompt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On &lt;strong&gt;BIOS-based systems&lt;/strong&gt;: Press the &lt;em&gt;Tab&lt;/em&gt; key and add custom boot options to the command line. You can also access the boot: prompt by pressing the &lt;em&gt;Esc&lt;/em&gt; key but no required boot options are preset. In this scenario, you must always specify the Linux option before using any other boot options.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On &lt;strong&gt;UEFI-based systems&lt;/strong&gt;: Press the &lt;em&gt;e&lt;/em&gt; key and add custom boot options to the command line. When ready press &lt;em&gt;Ctrl+X&lt;/em&gt; to boot the modified option.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you&amp;#8217;ve got access to the boot options and kernel parameters for the boot process, appent the following key-value pair to the first row:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;inst.ks=https://edge:qiotH4ckf3st@repo8.rhepds.com/edge/kick.ks&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case you get an SSL-failure whan the installation process is trying to download the kickstart file, also append the following kernel parameter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;inst.noverifyssl&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt; Keep in mind that the system will use an US-Keyboard-Layout at this stage.
This will point to our provided Kickstart File and the Internet based repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you chose to set up your own Deployment Server and use your own Kickstart-File, point to that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How you create your Own Edge Repository and make that available on an HTTP-Server is documented &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/composing_installing_and_managing_rhel_for_edge_images/installing-rpm-ostree-images_composing-installing-managing-rhel-for-edge-images&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your Network does not have a DHCP-Server to automatically supply an IP-Address to the Fitlet, refer to this &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/performing_an_advanced_rhel_installation/kickstart-and-advanced-boot-options_installing-rhel-as-an-experienced-user&quot;&gt;document&lt;/a&gt; on how to provide a manual IP-Address, DNS and Gateway-Information for the Networked Install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Fitlet will then run through the automated Install process and reboot at the end. Depending on your Internet-Speed, this will take a couple of minutes (the Process will Download 900 MB).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the System reboots, you can remove the USB Stick.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;get-access-to-the-fitlet2&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#get-access-to-the-fitlet2&quot;&gt;&lt;/a&gt;Get Access to the Fitlet2&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the system is up and running you can log into the local console using user root or user edge with the password &lt;em&gt;r3dh4t1!&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt; The default Keyboard-Layout will be &lt;em&gt;US&lt;/em&gt;. You can change it to your local Layout at this point. See &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/assembly_changing-basic-environment-settings_configuring-basic-system-settings#proc_configuring-the-keyboard-layout_assembly_changing-basic-environment-settings&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Change the passwords for both users as soon as possible to something secure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note down the IP-Address &amp;amp; Name of the System. Again, if you do not have a DHCP-Server in your Network, you need to manually configure the Network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point you also can set up a WiFi-Connection on the Commandline and use it from here on after instead of the cabled Network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to set up a static Network on the command line is documented &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-an-ethernet-connection_configuring-and-managing-networking#configuring-a-static-ethernet-connection-using-nmcli_configuring-an-ethernet-connection&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to set up a WiFi-Connection on the command line is documented &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/managing-wi-fi-connections_configuring-and-managing-networking&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you changed your Network Settings, please reboot now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once your Fitlet2 is up and Networked, you can also SSH into the system using user &lt;em&gt;&quot;root&quot;&lt;/em&gt; or User &lt;em&gt;&quot;edge&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, the Web-Management-Tool Cockpit is available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open a browser and point it to: &lt;em&gt;&quot;https://&amp;lt;fitlet IP or FQDN&amp;gt;:9090&quot;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Log In as root or edge to manage the Device.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Andreas Stolzenberger</name><email>astolzen@redhat.com</email></author><category term="blog" /><category term="qiot" /><category term="sno" /><category term="nuc" /><category term="howto" /><summary type="html">.</summary></entry><entry><title type="html">Install Single Node Openshift on Intel® 10th gen NUC</title><link href="/blog/sno-on-nuc10/" rel="alternate" type="text/html" title="Install Single Node Openshift on Intel® 10th gen NUC" /><published>2021-09-27T00:00:00+00:00</published><updated>2021-09-27T00:00:00+00:00</updated><id>/blog/sno-on-nuc10</id><content type="html" xml:base="/blog/sno-on-nuc10/">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel0&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites:&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#single-node-openshift-sno-4-8&quot;&gt;Single Node Openshift (SNO) 4.8+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#additional-requirements&quot;&gt;Additional requirements:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#optional-requirements&quot;&gt;Optional requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-discovery-iso&quot;&gt;The discovery ISO&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#create-the-iso&quot;&gt;Create the ISO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#burn-iso-to-usb-flash-drive&quot;&gt;Burn ISO to USB flash drive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#start-the-installation&quot;&gt;Start the installation&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#the-overview-page&quot;&gt;The Overview page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-networking-page&quot;&gt;The Networking page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-review-page&quot;&gt;The Review page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-installation-process-page&quot;&gt;The Installation process page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dns-required-configuration&quot;&gt;DNS required configuration&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#external-dns&quot;&gt;External DNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#redirect-dns-for-subdomain-cluster_name-cluster_domain-to-the-nuc&quot;&gt;Redirect DNS for subdomain &lt;code&gt;cluster_name.cluster_domain&lt;/code&gt; to the NUC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#local-resolution&quot;&gt;Local resolution:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#start-using-sno-on-intel-nuc&quot;&gt;Start using SNO on Intel® NUC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;introduction&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next guide will show how to deploy a Single Node Openshift (SNO) to a physical Intel® NUC.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;prerequisites&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prerequisites&quot;&gt;&lt;/a&gt;Prerequisites:&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Minimum prerequisites for the installation of single node openshift must be respected so I decided to provision a set of hardware components powerful enough to run services on the platform once it&amp;#8217;s been installed from both the computational power and the resources availability perspective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a look at what it&amp;#8217;s needed to install Single Node Openshift on a 10th gen Intel® NUC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hardware&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hardware&quot;&gt;&lt;/a&gt;Hardware&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Intel NUC model&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NUC10i7FNK&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Memory capacity&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;64.00 GiB&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU model name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Intel&amp;#174; Core&amp;#8482; i7-10710U CPU @ 1.10GHz&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU cores and clock speed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6 cores (12 with hyper-threaded) at 4,700 MHz&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU architecture&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;x86_64&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SSD Disk&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Samsung SSD M.2 256GB&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/NUC.jpg&quot; alt=&quot;NUC&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;single-node-openshift-sno-4-8&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#single-node-openshift-sno-4-8&quot;&gt;&lt;/a&gt;Single Node Openshift (SNO) 4.8+&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SNO requires the following minimum host resources:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;# Virtual CPU&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Virtual RAM&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;32 GB&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Storage&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;120 GB&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional-requirements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#additional-requirements&quot;&gt;&lt;/a&gt;Additional requirements:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to go through the installation process, the following additioal components are required:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;And a Red Hat account, with access to &lt;a href=&quot;https://console.redhat.com/openshift/&quot; class=&quot;bare&quot;&gt;https://console.redhat.com/openshift/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USB flash drive &amp;gt;= 2GB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHCP is required like IPI (Installer Provisioned Infrastructure) installations&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;optional-requirements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optional-requirements&quot;&gt;&lt;/a&gt;Optional requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following are optional requirements, but highly recommended:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generated a ssh key to connect to the node from your computer with ssh&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;$ ssh-keygen -t ed25519 -N '' -f ~/.ssh/id_rsa

$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc[...]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-discovery-iso&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-discovery-iso&quot;&gt;&lt;/a&gt;The discovery ISO&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deploying Openshift clusters with a discovery ISO is a functionality in Tech-Preview.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above taking into consideration that the fully SNO installation is a proof-of-concept without high availability or support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The use of the discovery ISO will help us especially in this case by not working with VMs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will burn it to the USB memory to launch the installation process, without any interaction required until the SNO installation ends.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-the-iso&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-the-iso&quot;&gt;&lt;/a&gt;Create the ISO&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create the discovery ISO you need to login and access  &lt;a href=&quot;https://console.redhat.com/openshift/&quot; class=&quot;bare&quot;&gt;https://console.redhat.com/openshift/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you are there, click on the “Create cluster” button, select &lt;strong&gt;Datacenter&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then under Assisted Installer, push the new &lt;strong&gt;Create cluster&lt;/strong&gt; button.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img01.png&quot; alt=&quot;img01&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ll be asked to fill a form with the following info:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set the Cluster name and Base domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark the checkbox to install single node OpenShift (SNO) and accept the warning message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the OpenShift version (Tested with OpenShift 4.8+).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit pull secret (no need to).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img02.png&quot; alt=&quot;img02&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click Next to continue to the Host discovery section:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img03.png&quot; alt=&quot;img03&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then click on button “Generate Discovery ISO”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;strong&gt;Minimal image file&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Paste your public key (check &lt;a href=&quot;#optional-requirements&quot;&gt;Optional requirements&lt;/a&gt; section)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case you need to add a proxy configuration for your setup, this is the time to define it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img04.png&quot; alt=&quot;img04&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on “Generate Discovery ISO” button, a temporary download link will appear&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img05.png&quot; alt=&quot;img05&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Copy the field “Command to download the ISO” or download to your PC with button “Download Discovery ISO”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img06.png&quot; alt=&quot;img06&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the download of the Discovery ISO is complete, you are ready to burn it to the USB flash drive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;burn-iso-to-usb-flash-drive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#burn-iso-to-usb-flash-drive&quot;&gt;&lt;/a&gt;Burn ISO to USB flash drive&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, start by connecting your USB flash drive to your computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fedora / RHEL:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s check the path of the device with “sudo fdisk -l”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img07.png&quot; alt=&quot;img07&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You need to identify the path of type /dev/sdN, in my case is /dev/sda if yours takes another path, replace it in the next step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s burn the ISO to the USB with the command “sudo dd if=discovery_image_sno01.iso of=/dev/sda”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img08.png&quot; alt=&quot;img08&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;installation&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The whole installation process is performed in several phases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each and every installation phase can be monitored and customized from the &lt;a href=&quot;https://console.redhat.com/openshift/&quot;&gt;remote interface&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section will guide you through the installation process and will highlight the potential issues and customization you&amp;#8217;ll be asked to apply to the SNO configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;start-the-installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-the-installation&quot;&gt;&lt;/a&gt;Start the installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Plug the USB flash drive to the Intel NUC, don’t forget to connect also the ethernet cable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ll also need to connect a keyboard and a monitor to perform take preliminary actions in order to make the NUC boot from the USB flash drive:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Power the NUC on;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the NUC logo shows on the screen, Press F10 to access the boot menu;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are keen to apply persistent changes to the boot menu, press F2 instead and enter the BIOS menu;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not apply any changes to the default BIOS performance config&lt;/strong&gt;, just set up the Boot section accordingly;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select your USB flash drive from the boot menu to boot from it;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to the browser at the &lt;strong&gt;Host Discovery&lt;/strong&gt; page;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a short time the status of your host will turn into &lt;strong&gt;Ready&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-overview-page&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-overview-page&quot;&gt;&lt;/a&gt;The Overview page&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img09.png&quot; alt=&quot;img09&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click Next to continue to Networking section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-networking-page&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-networking-page&quot;&gt;&lt;/a&gt;The Networking page&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the networking section you&amp;#8217;ll be asked to pick up a subnet in the &lt;strong&gt;Available subnets&lt;/strong&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img10.png&quot; alt=&quot;img10&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also you can modify the cluster and services networks, or change the default CNI from Openshift SDN to OVN-Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s also fine to leave as default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Click on the Next button.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-review-page&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-review-page&quot;&gt;&lt;/a&gt;The Review page&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this page you can review all the info associated to your cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img11.png&quot; alt=&quot;img11&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-installation-process-page&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-installation-process-page&quot;&gt;&lt;/a&gt;The Installation process page&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This page gives you an overview of the overall installation process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img12.png&quot; alt=&quot;img12&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The logs of the cluster and node installation can be consulted:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img13.png&quot; alt=&quot;img13&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the installation process reboots, the machine will need to boot from the disk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case the machine keeps booting from the USB flash drive. the installer will warn you about it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/boot-from-disk.png&quot; alt=&quot;boot from disk&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remove the USB and reboot the Host.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will take about 30 minutes to the installation process to complete. Duting that timeframe, the process will complete the installation of the SNO on the machine and will perform an update of the current version, up to the latest fix version (e.g.: 4.8.2 &amp;#8594; 4.8.9).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the installation process is complete you will obtain the kubeadmin password and the url to login to the console:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/sno-on-nuc10/img14.png&quot; alt=&quot;img14&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;dns-required-configuration&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dns-required-configuration&quot;&gt;&lt;/a&gt;DNS required configuration&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to access the SNO Web Console, you need to setup the hostname resolution for the SNO running on the NUC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;XXX.XXX.XXX.XXX = your SNO IP&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s possible to pick up one of the following options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;external-dns&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#external-dns&quot;&gt;&lt;/a&gt;External DNS&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use an external DNS server or local configuration to resolve the SNO hostname.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following records to your DNS server (recommended)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;api.cluster_name.cluster_domain      A	XXX.XXX.XXX.XXX
*.apps.cluster_name.cluster_domain   A	XXX.XXX.XXX.XXX&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Optional:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;cluster_name.cluster_domain	A	XXX.XXX.XXX.XXX&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;redirect-dns-for-subdomain-cluster_name-cluster_domain-to-the-nuc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#redirect-dns-for-subdomain-cluster_name-cluster_domain-to-the-nuc&quot;&gt;&lt;/a&gt;Redirect DNS for subdomain &lt;code&gt;cluster_name.cluster_domain&lt;/code&gt; to the NUC&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the installation of Single Node Openshift  a fully functional DNS server with the required wildcard DNS is configured. So you can redirect all DNS queries for the subdomain &lt;code&gt;cluster_name.clusterdomain&lt;/code&gt; to the NUC&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Modern Linux Systems like RHEL or Fedora use NetworkManager for Networking configuration and use dnsmasq for local DNS caching. To setup DNS on a RHEL 8 client you can create the file &lt;code&gt;/etc/NetworkManager/dnsmasq.d&lt;/code&gt; with the follwoing content:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;server=/apps.cluster_name.cluster_domain/XXX.XXX.XXX.XXX
host-record=api.cluster_name.cluster_domain,XXX.XXX.XXX.XXX&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then power-cycle NetworkManager and you are good to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;$ sudo systemctl NetworkManager restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;local-resolution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#local-resolution&quot;&gt;&lt;/a&gt;Local resolution:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Update your local /etc/hosts or /etc/resolve.conf files&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;XXX.XXX.XXX.XXX	api.cluster_name.cluster_domain
XXX.XXX.XXX.XXX	oauth-openshift.apps.cluster_name.cluster_domain
XXX.XXX.XXX.XXX	console-openshift-console.apps.cluster_name.cluster_domain
XXX.XXX.XXX.XXX	grafana-openshift-monitoring.apps.cluster_name.cluster_domain
XXX.XXX.XXX.XXX	thanos-querier-openshift-monitoring.apps.cluster_name.cluster_domain
XXX.XXX.XXX.XXX	prometheus-k8s-openshift-monitoring.apps.cluster_name.cluster_domain
XXX.XXX.XXX.XXX	alertmanager-main-openshift-monitoring.apps.cluster_name.cluster_domain&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Optional:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;XXX.XXX.XXX.XXX	cluster_name.cluster_domain&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;start-using-sno-on-intel-nuc&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#start-using-sno-on-intel-nuc&quot;&gt;&lt;/a&gt;Start using SNO on Intel® NUC&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can access your new Single Node Openshift at the following URL:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://console-openshift-console.apps.cluster_name.cluster_domain&quot; class=&quot;bare&quot;&gt;https://console-openshift-console.apps.cluster_name.cluster_domain&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name>Mario Parra</name><email>mparra@redhat.com</email></author><category term="blog" /><category term="qiot" /><category term="sno" /><category term="nuc" /><category term="howto" /><summary type="html">.</summary></entry><entry><title type="html">PoC Edge Manufacturing</title><link href="/blog/usecase-manufacturing/" rel="alternate" type="text/html" title="PoC Edge Manufacturing" /><published>2021-09-20T00:00:00+00:00</published><updated>2021-09-20T00:00:00+00:00</updated><id>/blog/usecase-manufacturing</id><content type="html" xml:base="/blog/usecase-manufacturing/">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel0&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#intro&quot;&gt;Intro&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#main-diagram&quot;&gt;Main Diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-machinery-edge-device&quot;&gt;The Machinery (edge device)&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#hardware&quot;&gt;Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#main-diagram-2&quot;&gt;Main Diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#operating-system&quot;&gt;Operating System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#container-technology&quot;&gt;Container technology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#machinery-service&quot;&gt;Machinery service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-factory-edge-server&quot;&gt;The Factory (Edge Server)&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#hardware-2&quot;&gt;Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#main-diagram-3&quot;&gt;Main Diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#platform&quot;&gt;Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#software-infrastructure-components&quot;&gt;Software infrastructure components&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#broker-service&quot;&gt;Broker service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sql-storage&quot;&gt;SQL Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nosql-storage&quot;&gt;NoSQL Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#business-logic-implementation&quot;&gt;Business Logic implementation&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#facility-manager&quot;&gt;Facility Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#product-line-service&quot;&gt;Product-Line service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#production-validator-service&quot;&gt;Production Validator service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#datacenter&quot;&gt;Datacenter&lt;/a&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#main-diagram-4&quot;&gt;Main Diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#platform-architecture&quot;&gt;Platform architecture&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#red-hat-openshift-container-platform&quot;&gt;Red Hat Openshift Container Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#software-infrastructure-components-2&quot;&gt;Software infrastructure components&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#stream-service&quot;&gt;Stream service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timeseries-storage&quot;&gt;Timeseries Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sql-storage-2&quot;&gt;SQL Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#nosql-storage-2&quot;&gt;NoSQL Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cert-manager-service&quot;&gt;Cert-manager service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#business-logic-implementations&quot;&gt;Business Logic implementations&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#registration-service&quot;&gt;Registration service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#plant-manager-service&quot;&gt;Plant Manager service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#global-product-line-service&quot;&gt;Global Product-line service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#event-collector-service&quot;&gt;Event Collector service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The team has been listening to the Market needs and investments for quite a few months recently.
In addition to that, we tried to understand what is the main trend in the innovation space, as well as the latest and greatest in terms of new projects and customer requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It came out that the manufacturing vertical is currently most invested vertical and we decided to try to address some common issues and questions regarding the architectural design and the most important collaterals such as security, workload distribution, connectivity and so on so forth.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;intro&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main goal is to build an environmental network of machineries producing goods intended for the global market.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The machineries (edge devices) belong to a facility network environment identified as Factory (Edge Server). The factories are managed by the central plant manager, identified as Datacenter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be specific, the machineries produce t-shirts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The item production is based on a &lt;strong&gt;production model&lt;/strong&gt; (a.k.a. &lt;em&gt;Product Line&lt;/em&gt;) and consists of &lt;strong&gt;four production stages&lt;/strong&gt;, each and every of subject to validation against a 3rd party entity living on the Factory layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the validation process returns a negative outcome, the item is marked as discarded and it&amp;#8217;s production process is interrupted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each and every stage production and the related validation are documented through telemetry sends to the plant manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/use-case-overview.png&quot; alt=&quot;use case overview&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;main-diagram&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#main-diagram&quot;&gt;&lt;/a&gt;Main Diagram&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/architecture/overview.png&quot; alt=&quot;overview&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-machinery-edge-device&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-machinery-edge-device&quot;&gt;&lt;/a&gt;The Machinery (edge device)&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The software running on the edge device has the purpose of emulating a machinery producing T-shirts based on the production model provided by the factory controller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The business logic of the Machinery has been entirely implemented using cloud-native frameworks and packaged using container technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/machinery-marketing.png&quot; alt=&quot;machinery marketing&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hardware&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hardware&quot;&gt;&lt;/a&gt;Hardware&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hardware of choice for the edge device is the Compulab Fitlet2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/fitlet2.jpg&quot; alt=&quot;fitlet2&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The FITLET2-CE3930 is equipped with Intel® Atom X5-E3930 powered by Intel®.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Model&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;FITLET2-CE3930-P36&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Fan / Fanless&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Fanless&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Intel® Atom x5-3930&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RAM&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1x 2Gb SO-DIMM 204-pin DDR3L Non-ECC DDR3L-1866 (1.35V)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Display&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dual head: mini DP 1.2 4K @ 60 Hz; HDMI 1.4 4K @ 30 Hz&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;WIFI&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;802.11ac dual antenna + BT 4.2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ethernet&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2 GbE ports on-board&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;USB 2.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4 USB ports on-board: 2x USB 3.0 + 2x USB 2.0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Audio&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stereo line out Realtek ALC1150 audio codec&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Serial Port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RS232 mini-serial&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BIOS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AMI Aptio V&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Input voltage range&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Up to DC 9V – 36V*&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Operating system support&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;all&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/fitlet2-block-diagram.png&quot; alt=&quot;fitlet2 block diagram&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional technical detail can be found at the following link: &lt;a href=&quot;https://fit-iot.com/web/products/fitlet2/fitlet2-specifications/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;main-diagram-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#main-diagram-2&quot;&gt;&lt;/a&gt;Main Diagram&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/architecture/edge.png&quot; alt=&quot;edge&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;operating-system&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#operating-system&quot;&gt;&lt;/a&gt;Operating System&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/brand/Logo-Red_Hat-Edge-A-Standard-RGB.png&quot; alt=&quot;Logo Red Hat Edge A Standard RGB&quot; width=&quot;20%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In an edge computing solution, the operating system is required to be efficient, lightweight and mature.
The team focused on the most efficient enterprise-grade solution on the marker, which guarantees security, performance, and container-native solutions.
Below a list of the principal, compulsory features we&amp;#8217;ve been looking for in an operating system:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Must be fully-fledged 64 bit OS (not just its kernel);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Must have a very small memory footprint;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Must be immutable or, at least, modular;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Must have the ability to run a container engine with the minimum memory footprint, like Podman or CRI-O;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most suitable and appropriate operating system, also certified on the target hardware is &lt;a href=&quot;https://www.redhat.com/en/resources/linux-for-edge-datasheet&quot;&gt;Red Hat Enterprise Linux for Edge (RHEL for Edge)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;container-technology&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#container-technology&quot;&gt;&lt;/a&gt;Container technology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/brand/podman-logo.png&quot; alt=&quot;podman logo&quot; width=&quot;15%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Podman is a daemonless, open source, Linux-native tool designed to develop, manage, and run Open Container Initiative (OCI) containers and pods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has a similar directory structure to Buildah, Skopeo, and CRI-O.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Podman doesn&amp;#8217;t require an active container engine for its commands to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, Podman is available in the standard rpm library of RHEL, so you get full support on it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;machinery-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#machinery-service&quot;&gt;&lt;/a&gt;Machinery service&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-quarkus.png&quot; alt=&quot;logo quarkus&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; framework and runs in &lt;a href=&quot;https://quarkus.io/guides/building-native-image&quot;&gt;native mode&lt;/a&gt; on a container environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Machinery service is the core service of the edge device and implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus framework&lt;/a&gt;. The service is compiled in native mode using &lt;a href=&quot;https://developers.redhat.com/blog/2021/04/14/mandrel-a-specialized-distribution-of-graalvm-for-quarkus&quot;&gt;MandrelVM&lt;/a&gt; to run natively into a container (possible on 64bit OS only!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, the Machinery service is designed and implemented to have the smallest memory footprint as possible and perform the transactions with the API exposed by the Factory in the shortest time. The native mode dramatically improves the performance and guarantees the full compatibility with the OCI standards and the Podman engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Machinery service is responsible for the emulation of a machinery producing T-shirts. The production process goes through four different stages each of the managed by a conveyor belt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The production stages are enumerated &lt;a href=&quot;https://raw.githubusercontent.com/qiot-project/qiot-manufacturing-all-domainmodel/main/src/main/java/io/qiot/manufacturing/all/commons/domain/production/ProductionChainStageEnum.java&quot;&gt;here&lt;/a&gt; and can be listed as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WEAVING&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COLORING&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PRINTING&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PACKAGING&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each and every production stage generates a set of random numbers representing what&amp;#8217;s been produced and that outcome is added to the Item data object and sent to the &lt;a href=&quot;#production-validator-service&quot;&gt;Production Validator service&lt;/a&gt; (Factory layer) for validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Machinery service starts the production of a new T-shirt every 2 seconds and the execution of each and stage job takes a random amount of time between 1 and 2 seconds. The team is open to thoughts and suggestions about the opportunity/need to make that timeframe variable for performance testing purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-edge-machinery&quot;&gt;dedicated repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-factory-edge-server&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-factory-edge-server&quot;&gt;&lt;/a&gt;The Factory (Edge Server)&lt;/h1&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hardware-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hardware-2&quot;&gt;&lt;/a&gt;Hardware&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Edge Server is based on the powerful Intel® NUC 10 Performance kit - NUC10i7FNH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Intel® NUC guarantees performance and stability to the container platform designed to control the facility and the machineries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/NUC.jpg&quot; alt=&quot;NUC&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Product Collection&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Intel® NUC Kit with 10th Generation Intel® Core™ Processors&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Board Number&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NUC10i7FNB&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Board Form Factor&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;UCFF (4&quot; x 4&quot;)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Socket&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Soldered-down BGA&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;# of Cores&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;# of Threads&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Processor Base Frequency&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.10 GHz&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Max Turbo Frequency&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.70 GHz&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RAM&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DDR4-2666 1.2V SO-DIMM&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Internal Drive Form Factor&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;M.2 and 2.5&quot; Drive&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SSD&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;M.2 256Gb&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lithography&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14 nm&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TDP&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14 nm&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lithography&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25 W&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DC Input Voltage Supported&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;19 VDC&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional technical detail can be found at the following link: &lt;a href=&quot;https://www.intel.com/content/www/us/en/products/sku/188811/intel-nuc-10-performance-kit-nuc10i7fnh/specifications.html&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;main-diagram-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#main-diagram-3&quot;&gt;&lt;/a&gt;Main Diagram&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/architecture/factory.png&quot; alt=&quot;factory&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;platform&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform&quot;&gt;&lt;/a&gt;Platform&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/Logo-Red_Hat-OpenShift-A-Standard-RGB.png&quot; alt=&quot;Logo Red Hat OpenShift A Standard RGB&quot; width=&quot;20%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Red Hat has worked a lot to make OpenShift footprint smaller to fit into more constrained environments by putting both control and worker capabilities into a single node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to the capabilities and functionalities of Single Node Openshift (SNO) it is now possible to leverage the overall factory management and automation with less reaources and dedicate at scale dedicated business logic to the scale of the production facilities in a secured fashion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The team is keen to provide a detailed walkthrough about How to install SNO on 10th gen NUC &lt;a href=&quot;https://qiot-project.github.io/blog/sno-on-nuc10/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;software-infrastructure-components&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#software-infrastructure-components&quot;&gt;&lt;/a&gt;Software infrastructure components&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;broker-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#broker-service&quot;&gt;&lt;/a&gt;Broker service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/Logo-Red_Hat-AMQ-A-Standard-RGB.png&quot; alt=&quot;Logo Red Hat AMQ A Standard RGB&quot; width=&quot;20%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A-MQ Broker is a pure-Java multiprotocol message broker. It’s built on an efficient, asynchronous core with a fast native journal for message persistence and the option of shared-nothing state replication for high availability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Persistence - A fast, native-IO journal or a JDBC-based store&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;High availability - Shared store or shared-nothing state replication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced queueing - Last value queues, message groups, topic hierarchies, and large message support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiprotocol - AMQP 1.0, MQTT, STOMP, OpenWire, and HornetQ Core&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration - Full integration with Red Hat JBoss EAP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A-MQ Broker is based on the &lt;a href=&quot;https://activemq.apache.org/artemis/&quot;&gt;Apache ActiveMQ Artemis&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The broker service exposes the endpoint for the stage production telemetry coming from the machineries running on the edge devices. The endpoint is exposed through the &lt;a href=&quot;https://activemq.apache.org/components/artemis/documentation/latest/openwire.html&quot;&gt;Openwire protocol&lt;/a&gt;, protocol of choice for the implementation of transactional asynchronous architectures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The broker offers dedicated queues for the production telemetry coming from the machineries and creates dedicated queues for the validation response from the validation service. More in detail, the broker service creates one queue for each and every machinery service awaiting for validation responses.
Technical details about the telemetry and the endpoints to be given in the next chapters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sql-storage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sql-storage&quot;&gt;&lt;/a&gt;SQL Storage&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-postgresql.png&quot; alt=&quot;logo postgresql&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The relational database engine is used to store non-timeseries data like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Machinery data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More about PostgreSQL can be found &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;nosql-storage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nosql-storage&quot;&gt;&lt;/a&gt;NoSQL Storage&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-mongodb.png&quot; alt=&quot;logo mongodb&quot; width=&quot;30%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MongoDB’s document data model naturally supports JSON and its expressive query language is simple for developers to learn and use. Functionality such as automatic failover, horizontal scaling, and the ability to assign data to a location are built-in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The nosql database service is helpful when it comes to store, query and retrieve structured data sets like the json version of the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-factory-domainmodel/blob/main/src/main/java/io/qiot/manufacturing/factory/commons/domain/productline/ProductLineDTO.java&quot;&gt;Product Line&lt;/a&gt; model.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;business-logic-implementation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#business-logic-implementation&quot;&gt;&lt;/a&gt;Business Logic implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;facility-manager&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#facility-manager&quot;&gt;&lt;/a&gt;Facility Manager&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-quarkus.png&quot; alt=&quot;logo quarkus&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; framework and runs in &lt;a href=&quot;https://quarkus.io/guides/building-native-image&quot;&gt;native mode&lt;/a&gt; on a container environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Facility Manager service is the core service of the factory layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is responsible for the management of the following entities in the facility:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The factory;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The machineries;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The machinery service also covers a few operational functionalities like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Device subscription (pass-through);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Certificates distribution (pass-through);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Factory ID provider for all the services belonging to the same layer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At bootstrap time, the Facility Manager subscribes to the Central subscription system on the datacenter, providing its identity info (&lt;strong&gt;Serial ID&lt;/strong&gt; and &lt;strong&gt;Name&lt;/strong&gt;). it will receive, in turn, a unique ID (in a format of a UUID) that each and every service running on the factory layer will use when connecting to the services running on the datacenter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The response from the Plant Manager service will also contain the certificates used for mutual authentication against services running on the datacenter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The specs of the services exposed by the Facility Manager service can be found into the dedicated section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-factory-facility-manager&quot;&gt;dedicated repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;product-line-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#product-line-service&quot;&gt;&lt;/a&gt;Product-Line service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-quarkus.png&quot; alt=&quot;logo quarkus&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; framework and runs in &lt;a href=&quot;https://quarkus.io/guides/building-native-image&quot;&gt;native mode&lt;/a&gt; on a container environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Product-line service is responsible for transforming the &lt;a href=&quot;https://raw.githubusercontent.com/qiot-project/qiot-manufacturing-datacenter-domainmodel/main/src/main/java/io/qiot/manufacturing/datacenter/commons/domain/productline/GlobalProductLineDTO.java&quot;&gt;Global Product-line&lt;/a&gt; into a model that supposed to be consumed by the Machineries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The transformation phase consists of a few simple steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Consumes the latest product line available from the Streaming service running on the Datacenter;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applies &lt;a href=&quot;https://raw.githubusercontent.com/qiot-project/qiot-manufacturing-datacenter-domainmodel/main/src/main/java/io/qiot/manufacturing/datacenter/commons/domain/productline/MarginsDTO.java&quot;&gt;Margins&lt;/a&gt; to the basic values contained into the product line data object;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stores the &lt;a href=&quot;https://raw.githubusercontent.com/qiot-project/qiot-manufacturing-factory-domainmodel/main/src/main/java/io/qiot/manufacturing/factory/commons/domain/productline/ProductLineDTO.java&quot;&gt;outcome&lt;/a&gt; of the previous phase into the SQL database for future distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main goal of the above functionality is to create a product line model that, merged with the margins, extends the range of possible values for the emulation (rundom number generators) performed by the &lt;a href=&quot;#machinery-service&quot;&gt;Machinery service&lt;/a&gt;. That, in turn, will generate a certain percentage of values not belonging to the original range of values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/diagrams/validator-productline-diagram.png&quot; alt=&quot;validator productline diagram&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-factory-productline&quot;&gt;dedicated repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;production-validator-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#production-validator-service&quot;&gt;&lt;/a&gt;Production Validator service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-quarkus.png&quot; alt=&quot;logo quarkus&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; framework and runs in &lt;a href=&quot;https://quarkus.io/guides/building-native-image&quot;&gt;native mode&lt;/a&gt; on a container environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Validator service is responsible for the validation of the outcome of each and every production stage performed by the &lt;a href=&quot;#machinery-service&quot;&gt;Machinery service&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It relies on the &lt;a href=&quot;#product-line-service&quot;&gt;Product-Line service&lt;/a&gt; to gather the info related to the Product-line model and communicate asynchronously with the machineries through the &lt;a href=&quot;#broker-service&quot;&gt;Broker service&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/diagrams/validator-service-diagram.png&quot; alt=&quot;validator service diagram&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-factory-productionvalidator&quot;&gt;dedicated repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;datacenter&quot; class=&quot;sect0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#datacenter&quot;&gt;&lt;/a&gt;Datacenter&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Datacenter layer of the Manufacturing use-case has been designed and implemented by the team and is made up of several services and business logic to manage, store, aggregate and retrieve data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;main-diagram-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#main-diagram-4&quot;&gt;&lt;/a&gt;Main Diagram&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-manufacturing/architecture/datacenter.png&quot; alt=&quot;datacenter&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;platform-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platform-architecture&quot;&gt;&lt;/a&gt;Platform architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The infrastructure of the QIoT project must have flexible imprinting and should be easily scalable both horizontally and vertically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To fulfill the scalability requirements a Cloud-based platform is needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A graphical representation of the basic Infrastructure Architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/usecase-covid-19/datacenter-v2-infrastructure.png&quot; alt=&quot;datacenter v2 infrastructure&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Based on the image above, here is the sizing of the infrastructure provisioned for the Openshift Container Platform:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OCP Control Plane (master nodes)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;#Servers: 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPUs: 8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RAM: 24G&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OCP Worker Nodes:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;#Servers: 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPUs: 12&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RAM: 64GB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage Server: provides storage functionality to the infrastructure to store data safely and consistently on the disk. There’s no urgent/compulsory need to add this component to the infrastructure architecture, at least at the early stage of the project, because the basic amount of storage provided by the cloud platform would definitely cover all the needs described.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some additional storage will be needed in case of extended lifetime and participation in the project (i.e. lots more data arriving at the Data Hub). Anyway, just making use of the storage layer from the cloud provider of choice and installing Openshift Container Storage on top of it will guarantee horizontal scalability and data consistency all over the container platform out of the box.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vertical scalability is guaranteed by the could platform.
Horizontal scalability is guaranteed by Openshift by using the auto-scaling feature embedded in the container platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;red-hat-openshift-container-platform&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#red-hat-openshift-container-platform&quot;&gt;&lt;/a&gt;Red Hat Openshift Container Platform&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/Logo-Red_Hat-OpenShift-A-Standard-RGB.png&quot; alt=&quot;Logo Red Hat OpenShift A Standard RGB&quot; width=&quot;20%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Red Hat OpenShift is the hybrid cloud platform of open possibility: powerful, so you can build anything and flexible, so it works anywhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adopting the Openshift container platform made us save tons of hors implementing features and behaviors supposed to be home cooked, otherwise:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Native pipelines using Tekton&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One-shot installation using Helm charts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2-day operations using Operator Framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Container storage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security and Isolation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automate cluster scalability&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More about Openshift Container Platform can be found &lt;a href=&quot;https://www.openshift.com/learn/developer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;software-infrastructure-components-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#software-infrastructure-components-2&quot;&gt;&lt;/a&gt;Software infrastructure components&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;stream-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stream-service&quot;&gt;&lt;/a&gt;Stream service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-strimzi.png&quot; alt=&quot;logo strimzi&quot; width=&quot;20%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-kafka.png&quot; alt=&quot;logo kafka&quot; width=&quot;20%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the forecast of the need for receiving/handling a large number of concurrent messages, A-MQ Streams is the component of choice for streaming messages through the integration and the storage layers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An internal streaming service guarantees scalability and reliability of the message flow management within the Datacenter business logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Stream service topics serve a variety of functionalities and processes impacting the following workflows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Product-line&lt;/strong&gt;: New Global product-line are delivered to the streaming service for asyncronous consumption by the factories. This workflow requires persistence and off-set management, both provided by the A-MQ Streams product;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Telemetry&lt;/strong&gt;: A-MQ perfectly fits into the canonical usecase of telemetry stream and management. Compared to the previous use-case implemented by the community, the team decided to go for a more structured and scalable approach based on a could-native product, rather that just relying on a communication protocol like &lt;a href=&quot;https://mqtt.org/&quot;&gt;MQTT protocol&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation choices above make it easy to fine tune the connections, the scalability, the message flow, and retention separately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This design makes it a lot easier to decouple the implementation details of the integration services responsible for offloading (consuming messages from) every topic and storing the values into the storage tier, improving horizontal scalability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More about A-MQ Streams can be found &lt;a href=&quot;https://developers.redhat.com/blog/2019/06/06/accessing-apache-kafka-in-strimzi-part-1-introduction/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;timeseries-storage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#timeseries-storage&quot;&gt;&lt;/a&gt;Timeseries Storage&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-influxdb.png&quot; alt=&quot;logo influxdb&quot; width=&quot;20%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Timeseries database engines are the technology of choice to store the telemetry coming from the IoT devices in an Edge Computing scenario.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this use-case the team has picked up Influxdb, as it guarantees scalability, reliability and a level of performances not achievable using other competitors on the market.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, InfluxDB is the essential time series toolkit — dashboards, queries, tasks and agents all in one place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As well as for the previous software infrastructure components used to receive and stream data, we have decided to go for a separation by telemetry-time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Timeseries Storage hosts the data relative to one telemetry only:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More about InfluxDB can be found &lt;a href=&quot;https://www.influxdata.com/products/influxdb/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sql-storage-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sql-storage-2&quot;&gt;&lt;/a&gt;SQL Storage&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-postgresql.png&quot; alt=&quot;logo postgresql&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The relational database engine is used to store non-timeseries data like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Factory-related data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Machinery-related data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More about PostgreSQL can be found &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;nosql-storage-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nosql-storage-2&quot;&gt;&lt;/a&gt;NoSQL Storage&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-mongodb.png&quot; alt=&quot;logo mongodb&quot; width=&quot;30%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MongoDB’s document data model naturally supports JSON and its expressive query language is simple for developers to learn and use. Functionality such as automatic failover, horizontal scaling, and the ability to assign data to a location are built-in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The nosql database service is helpful when it comes to store, query and retrieve structured data sets like the json version of the &lt;a href=&quot;https://raw.githubusercontent.com/qiot-project/qiot-manufacturing-datacenter-domainmodel/main/src/main/java/io/qiot/manufacturing/datacenter/commons/domain/productline/GlobalProductLineDTO.java&quot;&gt;Global Product-line&lt;/a&gt; model.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cert-manager-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cert-manager-service&quot;&gt;&lt;/a&gt;Cert-manager service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-cert-manager.png&quot; alt=&quot;logo cert manager&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cert-manager automates certificate management in cloud native environments and thus helped with the implementation of a dynamic certificate provisioning for edge devices&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;cert-manager builds on top of Kubernetes, introducing certificate authorities and certificates as first-class resource types in the Kubernetes API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This makes it possible to provide 'certificates as a service' to developers working within your Kubernetes cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Highlights&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide easy to use tools to manage certificates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A standardised API for interacting with multiple certificate authorities (CAs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gives security teams the confidence to allow developers to self-server certificates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for ACME (Let&amp;#8217;s Encrypt), HashiCorp Vault, Venafi, self signed and internal certificate authorities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extensible to support custom, internal or otherwise unsupported CAs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More about out cert-manager implementation &lt;a href=&quot;https://qiot-project.github.io/blog/qiot-cert-manager/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More about Cert-Manageranager can be found &lt;a href=&quot;https://cert-manager.io/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;business-logic-implementations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#business-logic-implementations&quot;&gt;&lt;/a&gt;Business Logic implementations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Datacenter business logic is built on top of Quarkus framework. All the services run natively on top of the container technology and benefit from the features from the Serverless architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A separate discussion must be done for the Dashboard, which exposes diagrams based on the telemetry coming from the measurement stations and in implemented on top of RedHat build of Node.js&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;registration-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#registration-service&quot;&gt;&lt;/a&gt;Registration service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-quarkus.png&quot; alt=&quot;logo quarkus&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; framework and runs in &lt;a href=&quot;https://quarkus.io/guides/building-native-image&quot;&gt;native mode&lt;/a&gt; on a container environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s responsible for the provisioning and maintainance of the certificates used by services to connect to the other layers of the architecture using the mutual authentication method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main goal of the registration service is to implement a façade between the &lt;a href=&quot;#plant-manager-service&quot;&gt;Plant Manager service&lt;/a&gt; and the &lt;a href=&quot;#cert-manager-service&quot;&gt;Cert-manager service&lt;/a&gt;. To achive this goal and to make the access to the service limited, the service is not exposed by the router.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The interaction between the registration service and the Cert-manmager service is supported by the &lt;a href=&quot;https://developers.redhat.com/articles/2021/07/16/whats-new-fabric8-kubernetes-client-version-550#&quot;&gt;fabric8 Kubernetes plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-datacenter-registration&quot;&gt;dedicated repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;plant-manager-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#plant-manager-service&quot;&gt;&lt;/a&gt;Plant Manager service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-quarkus.png&quot; alt=&quot;logo quarkus&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; framework and runs in &lt;a href=&quot;https://quarkus.io/guides/building-native-image&quot;&gt;native mode&lt;/a&gt; on a container environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s responsible for the management of the overall landscape:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Factories&lt;/strong&gt; subscribe to the plant-manager and obtain a unique UUID and a trust store containing both the certificates for the connection to the datacenter and from the Machineries;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Machineries&lt;/strong&gt; subscribe to the facility manager service which, in turn, forwards the request to the plant manager service. They Obtain a unique UUID and a trust store containing the certificates to connect to the services exposed by the Factory layer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Landscape data are stored in the &lt;a href=&quot;#sql-storage&quot;&gt;SQL Storage&lt;/a&gt; to take advantage of the CRUD operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, the service makes use of the 2nd level cache to speed up the read operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It exposes a rest API secured with mutual authentication. Details about the exposed endpoints are available in the &lt;a href=&quot;#Specs&quot;&gt;[Specs]&lt;/a&gt; section&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-datacenter-plant-manager&quot;&gt;dedicated repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;global-product-line-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#global-product-line-service&quot;&gt;&lt;/a&gt;Global Product-line service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-quarkus.png&quot; alt=&quot;logo quarkus&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; framework and runs in &lt;a href=&quot;https://quarkus.io/guides/building-native-image&quot;&gt;native mode&lt;/a&gt; on a container environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Global Product-line service is responsible for managing the Product-line models at the central level. The service can either:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generate a new random &lt;a href=&quot;https://raw.githubusercontent.com/qiot-project/qiot-manufacturing-datacenter-domainmodel/main/src/main/java/io/qiot/manufacturing/datacenter/commons/domain/productline/GlobalProductLineDTO.java&quot;&gt;Global Product-line&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Receive one from the GUI (not yet implemented) through REST API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Product-line model is validated and stored into the &lt;a href=&quot;#sql-storage&quot;&gt;SQL Storage&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-datacenter-productline&quot;&gt;dedicated repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;event-collector-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#event-collector-service&quot;&gt;&lt;/a&gt;Event Collector service&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/logo/logo-quarkus.png&quot; alt=&quot;logo quarkus&quot; width=&quot;10%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s implemented on top of the &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt; framework and runs in &lt;a href=&quot;https://quarkus.io/blog/runtime-performance/&quot;&gt;JVM mode&lt;/a&gt; on a container environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This service is responsible for consuming the telemetry coming from the &lt;a href=&quot;#stream-service&quot;&gt;Stream service&lt;/a&gt;.The consumed paylod gets calidated, eventually decorated or adapted, and finally stored into the &lt;a href=&quot;#timeseries-storage&quot;&gt;Timeseries Storage&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The team decided to go for a pure microservice implementation, dedicating one service to each and every telemetry type. Thus, all the services belonging to the event-collector family must extend some common abstract components that can be found into the &lt;em&gt;Commons&lt;/em&gt; repositories (&lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-datacenter-utilities/tree/main/src/main/java/io/qiot/manufacturing/datacenter/commons/service/telemetry&quot;&gt;qiot-manufacturing-datacenter-utilities&lt;/a&gt;) and must be implemented adhering to the microservices atomicity, scalability and isolation recommended practices. Creating additional serviecs to handle different types of telemetries is left to the audience ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Thanks to the Commons module it&amp;#8217;s easy to extend the group of services to make them accept an additional telemetry type;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As the frequency of incoming messages per telemetry type can vary, scaling feature affects only one service in the group;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Due to the incompatibility of the &lt;a href=&quot;https://github.com/influxdata/influxdb-client-java&quot;&gt;Java Client for InfluxDB&lt;/a&gt; with Quarkus native mode, the service is compiled using the standard java fast-jar mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/qiot-project/qiot-manufacturing-datacenter-event-collector&quot;&gt;dedicated repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Andrea Battaglia</name><email>abattagl@redhat.com</email></author><category term="usecase" /><summary type="html">The team has been listening to the Market needs and investments for quite a few months recently. In addition to that, we tried to understand what is the main trend in the innovation space, as well as the latest and greatest in terms of new projects and customer requests.</summary></entry><entry><title type="html">Call for proposals 2021</title><link href="/blog/call-for-proposals-2021/" rel="alternate" type="text/html" title="Call for proposals 2021" /><published>2021-04-20T00:00:00+00:00</published><updated>2021-04-20T00:00:00+00:00</updated><id>/blog/call-for-proposals-2021</id><content type="html" xml:base="/blog/call-for-proposals-2021/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hi everyone!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s time for the QIoT community to focus on a new Edge Computing use-case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are calling you all for proposals as we believe our contribution should meet the expectations and the needs and should help addressing risks and challenges of the Edge Computing ecosystem: Subject Matter Experts, System Integrators, Customers, etc&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new use-case is a great stepping-stone to modernize existing architectures and keep improving the blueprints adhering to the latest specs. To give you a few examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Certificate provisioning and mutual authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edge workload distribution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloud-native events&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed CI/CD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipelines and charts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With some boundaries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;underline&quot;&gt;Container Platform&lt;/span&gt; of choice: &lt;strong&gt;Openshift&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&quot;underline&quot;&gt;Cloud-Native framework&lt;/span&gt; of choice: &lt;strong&gt;Quarkus&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;proposal-submission-how-to&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#proposal-submission-how-to&quot;&gt;&lt;/a&gt;Proposal submission: How to&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fork&lt;/strong&gt; the &lt;a href=&quot;https://github.com/qiot-project/qiot-ubi-use-case-proposals&quot;&gt;repository&lt;/a&gt; we created to collect all the proposal submissions;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;strong&gt;sub-folder under &quot;2021&quot;&lt;/strong&gt; and name it with the name of your proposal and place all your submission content there:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;strong&gt;README&lt;/strong&gt; to argument the followings:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vertical (e.g.: manufacturing, automotive, telco, healthcare, etc) the use-case falls into;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use-case;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Technology stack;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add everything that could draw a clear and understandable big picture of your proposal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Submit a PR to get your content merged;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve set up &lt;strong&gt;GitHub Discussion&lt;/strong&gt; on the &lt;a href=&quot;https://github.com/qiot-project/qiot-ubi-use-case-proposals/discussions&quot;&gt;repository&lt;/a&gt; to encourage and support open discussion and debate around the submitted proposals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best proposals will be put to the vote by public survey.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;underline&quot;&gt;&lt;strong&gt;Deadline: May 24th 2021&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;The QIoT team&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Andrea Battaglia</name><email>abattagl@redhat.com</email></author><category term="announcement" /><category term="announcement" /><summary type="html">Hi everyone!</summary></entry><entry><title type="html">Integration in a Distributed World</title><link href="/blog/integration-in-a-distributed-world/" rel="alternate" type="text/html" title="Integration in a Distributed World" /><published>2021-04-09T00:00:00+00:00</published><updated>2021-04-09T00:00:00+00:00</updated><id>/blog/integration-in-a-distributed-world</id><content type="html" xml:base="/blog/integration-in-a-distributed-world/">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#what-is-integration&quot;&gt;What is Integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-integration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-integration&quot;&gt;&lt;/a&gt;What is Integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-integration (noun) - &quot;the process of bringing together the component sub-systems into one system ``` hljs&quot; data-lang=&quot;integration (noun) - &quot;the process of bringing together the component sub-systems into one system ```&quot;&gt;Integration unlocks the true potential of modern enterprises. Time and time again we see the same stories pop-up,
the likes of Uber, Air BnB, Amazon, Netflix. How these vastly different businesses used modern technologies and methodologies,
to massively distrupt their respective markets and outperform and outlast long standing companies.
We are seeing the value, and almost the neccesity that every company these days, should first and foremost be a &quot;software company&quot;.

But being a software company will only get you so far. A company could be highly reliant on outdated, inefficient technology.
This will enventually become a burden, and the technology will not serve the company, but rather, the company will serve the technology.

That's not a good position to be in.

So where does Integration come into play?

There are 3 points that are very apt here:
1. “Agility” is the most important business capability today
2. Every organization has integration problems to solve
3. Centralized doesn't scale




## Red Hat Integration

Red Hat have a number of products to solve your Integration problems, but the 3 main pillars, or product types, fall into the categories
of: Distributed Integration, Containers and APIs

image:/assets/images/posts/integration-in-a-distributed-world/architecture.png[width=100%]


### Distributed Integration

In all modern integration architectures we see a shift away from centralized integration. While a centralized integration
bus has a number of benefits, it is becoming less suitable to modern use cases. 100s of Applications are becomes 10,000s of microservices
Speed, agility and flexibility are key. With a heavy, cumbersome ESB, maintenance and management can be a headache as the ESB
keeps getting larger and more complex with every service or data point that is added. With ESBs we have a smart pipe, with dumb endpoints.
We need to move towards dumb pipes and smart endpoints.

If we deploy our integration service across a distributed architecture it reduces the likelyhood of it becoming a bottleneck.
We can scale up and down much easier by adding new deployments or replicas to our services. We also gain added resiliancy
as a by-product, as (depending on the nature of our deployment), our service can be distributed across multiple clouds, datacenters,
or geos.


### Containers

Containerizing our services allows us massive portability and repeatability across multiple deployment targets. Openshift
being Red Hat's Container Platform facilitates the distributed nature of our integration deployment, and any deployment for that matter.
OCP can be run across mulitple clouds, on RHEL or bare metal servers. And wherever OCP is, our Integration products can be deployed.

image:/assets/images/posts/integration-in-a-distributed-world/distributed-integration.png[width=100%]

### APIs

API based integration is how we move from smart pipes to smart endpoints. We hand off responsibility to each service or data point
to create and uphold its API contract. This tells us how to interact with the service and what data formats and structures it expects.
The contracts themselves can be version controlled, allowing backwards compatibility with other older services while also creating and
exposing new APIs.

Once we have moved heavy business logic and communication contracts out of our integration layer, it can work much faster and more efficiently.


## Distributed World

What we see driving more need for a modern integration architecture is the world of IOT. Now instead of 10,000s of microservices we are
seeing millions if not billions of connected devices, sensors, services. All collecting and sending data across your architecture.
And in this case especially 'Centralized Doesn't Scale'. This mantra applies not only to the architecture, but also to the people!

image:/assets/images/posts/integration-in-a-distributed-world/people.png[width=100%]

While a centralised Integration Team is highly efficient, it may not be agile. And sooner or later it will become a bottleneck.

How can we fix this?

In an ideal world, you can Do-It-Yourself. You don't need to wait for the integration team to build the API or transformation layer that
you need for your application. You can create it yourself, using Low-Code or No-Code tooling. Having this type of technology available
will greatly reduce the load on the centralised team, and also increase the agility speed and time-to-market of new applications and services.


## Learn more...

While we mainly focus on the 3 main products in our Integration Bundle (Fuse, Openshift and 3scale), there are
mainy more products to accomplish a miriad of tasks and address specific problems with your integration architecture.

image:/assets/images/posts/integration-in-a-distributed-world/portfolio.png[width=100%]


If you would like to learn more about this products or features why not check out our
coding playground - http://learn.openshift.com[learn.openshift]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Eoin Crosbie</name><email>ecrosbie@redhat.com</email></author><category term="blog" /><summary type="html">Table of Contents What is Integration What is Integration</summary></entry><entry><title type="html">Quarkus Secure on the Edge</title><link href="/blog/qiot-cert-manager/" rel="alternate" type="text/html" title="Quarkus Secure on the Edge" /><published>2021-04-01T00:00:00+00:00</published><updated>2021-04-01T00:00:00+00:00</updated><id>/blog/qiot-cert-manager</id><content type="html" xml:base="/blog/qiot-cert-manager/">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first part around Security on the Edge topics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When discussing IoT device and edge computing, secure end-to-end device connectivity is critical to consider in this extra layer of complexity.
How is it possible to automate and securely integrate thousand of devices?
Quarkus IoT team decided for the certificate management to choose &lt;a href=&quot;https://cert-manager.io&quot;&gt;cert-manager&lt;/a&gt;, which is built on top of Kubernetes to provide 'certificates as services' developers working in Kubernetes cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here the Cert Managers Highlight:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide easy to use tools to manage certificates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A standardised API for interacting with multiple certificate authorities (CAs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gives security teams the confidence to allow developers to self-server certificates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for ACME (Let&amp;#8217;s Encrypt), HashiCorp Vault, Venafi, self-signed and internal certificate authorities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extensible to support custom, internal or otherwise unsupported CAs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture-overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#architecture-overview&quot;&gt;&lt;/a&gt;Architecture Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/qiot-cert-manager/architecture.png&quot; alt=&quot;architecture&quot; width=&quot;100%&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The device sends a request to Registration Service API. Only devices with the proper Certificate are allowed to send the request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The registration based on the device request payload starts to create the Certificate resource, and it watches the resource for an update.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;cert-manager&lt;/code&gt; operator detects the new &lt;code&gt;Certificate&lt;/code&gt;, and it starts the reconciliation process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Based on the &lt;code&gt;Certificate&lt;/code&gt; and &lt;code&gt;Issuer&lt;/code&gt; information, the &lt;code&gt;cert-manager&lt;/code&gt; creates a CSR and requests the Certificate to PKI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;cert-manager&lt;/code&gt; once get the Certificate it updates the secret with the correct key, Certificate and Certificate authority.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Due to the asynchronous mechanism, the registration service will wait until the certificate information is available in the secret resource.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The registration sends the device certificate as a response to the device.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;issuer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issuer&quot;&gt;&lt;/a&gt;Issuer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Issuer&lt;/code&gt;, and &lt;code&gt;ClusterIssuer&lt;/code&gt;, are Kubernetes resources representing certificate authorities (CAs) that can generate signed certificates by honouring certificate signing requests. All certificates require a referenced issuer that is in a ready condition to attempt to keep the request.
An example of an Issuer type is CA. A simple CA Issuer is as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: qiot-ca-sample
spec:
  ca:
    secretName: qiot-ca&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a simple &lt;code&gt;Issuer&lt;/code&gt; that will sign certificates based on a private key. The certificate stored in the secret &lt;code&gt;ca-key-pair&lt;/code&gt; can then be used to trust newly signed certificates by this &lt;code&gt;Issuer&lt;/code&gt; in a Public Key Infrastructure (PKI) system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An &lt;code&gt;Issuer&lt;/code&gt; is a namespaced resource, and it is not possible to issue certificates from an &lt;code&gt;Issuer&lt;/code&gt; in a different namespace. It means you will need to create an &lt;code&gt;Issuer&lt;/code&gt; in each namespace you wish to obtain &lt;code&gt;Certificate&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Quarkus IoT team decided to use Hashicorp Vault as internal PKI. The next part will explore in details this integration.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;certificate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#certificate&quot;&gt;&lt;/a&gt;Certificate&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Certificate&lt;/code&gt; that define the desired x509 certificate which will be renewed and kept up to date. A &lt;code&gt;Certificate&lt;/code&gt; is a namespaced resource that references an &lt;code&gt;Issuer&lt;/code&gt; or &lt;code&gt;ClusterIssuer&lt;/code&gt; that determine what will be honouring the certificate request.
When a &lt;code&gt;Certificate&lt;/code&gt; is created, a corresponding &lt;code&gt;CertificateRequest&lt;/code&gt; resource is created by &lt;code&gt;cert-manager&lt;/code&gt; containing the encoded x509 certificate request.
Here is one example of a Certificate resource.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: qiot-device-sample
spec:
  dnsNames:
    - mydeviceid.qiot-project.github.io
    - mydeviceid.qiot-project.svc
  secretName: qiot-device-sample-cert
  issuerRef:
    name: qiot-ca-sample&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;code&gt;Certificate&lt;/code&gt; will tell &lt;code&gt;cert-manager&lt;/code&gt; to attempt to use the &lt;code&gt;Issuer&lt;/code&gt; named &lt;code&gt;qiot-ca-sample&lt;/code&gt; to obtain a certificate key pair for the &lt;code&gt;mydeviceid.qiot-project.github.io&lt;/code&gt; and &lt;code&gt;mydeviceid,qiot-project.svc&lt;/code&gt; domains. If successful, the resulting TLS key and certificate will be stored in secret named &lt;code&gt;qiot-device-sample-cert&lt;/code&gt;, with key of &lt;code&gt;tls.key&lt;/code&gt;, and &lt;code&gt;tls.crt&lt;/code&gt; respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This secret will live in the same namespace as the &lt;code&gt;Certificate&lt;/code&gt; resource. Additionally, if the Certificate Authority is known, the corresponding CA certificate is stored in secret with key &lt;code&gt;ca.crt&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;dnsNames&lt;/code&gt; field specifies a list of Subject Alternative Names to be associated with the certificate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The referenced &lt;code&gt;Issuer&lt;/code&gt; must exist in the same namespace as the &lt;code&gt;Certificate&lt;/code&gt;. A &lt;code&gt;Certificate&lt;/code&gt; can alternatively reference a &lt;code&gt;ClusterIssuer&lt;/code&gt; that is non namespaced and can be referenced from any namespace.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;certificaterequest&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#certificaterequest&quot;&gt;&lt;/a&gt;CertificateRequest&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;CertificateRequest&lt;/code&gt; is a namespaced resource in cert-manager used to request x509 certificates from an &lt;code&gt;Issuer&lt;/code&gt;. The resource contains a
base64 encoded string of a PEM encoded certificate request sent to the referenced issuer.
A successful issuance will return a signed certificate based on the certificate signing request.
&lt;code&gt;CertificateRequest&lt;/code&gt; are typically consumed and managed by controllers or other systems and should not be used by humans - unless specifically needed. A simple &lt;code&gt;CertificateRequest&lt;/code&gt; looks like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;apiVersion: cert-manager.io/v1
kind: CertificateRequest
metadata:
  name: qiot-device-sample-wnjp5
spec:
  issuerRef:
    name: qiot-ca-sample
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ3ZUQ0NBYVVDQVFBd0xERXFNQ2dHQTFVRUF4TWhiWGxrWlhacFkyVnBaQzV4YVc5MExYQnliMnBsWTNRdQpaMmwwYUhWaUxtbHZNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFCbngyNlUwCk5rUUxrbzZzZlExK1RCUE5Ud0t6NVpSRnhQK1VycTRCL0U4Vm5RNGt3SUhzSXJXMHozRkE3WC9GUTh6ZEtRNjYKMCtyRkFpQ3ROVDllWEZWRVpmVUowNC9Kb21sc3pVV2JDYmhZejcvVGhSTHE0Nm44U0FTclVCaUNDU2JFQTBsOQp1ZFg1ZEFYT3QxVmxZeVdhTTZqMU52QldvbC9xMGZJREhxaVNOZU1lUFB1b0FIcVQrVGRFbzg1dGQ0U2YvN21zCnJlN1gwNHFadWRHQ1hhc0tDMnErZitsYmd2NmNCaDRxZDNsVHZNQ3JYclZuTkpTRElLY2xMYXE2MzV0d1Q2L1IKSFU5TDB3N2hFR1pQQXR1OXJMZnNZOFJPOXJGWnJZZzVPUzVSME40bHFsQlBucStmdFBUMEdaQlBhSysxWDJDaApDejRMVFR1S2ZWaldRUUlEQVFBQm9Fd3dTZ1lKS29aSWh2Y05BUWtPTVQwd096QXNCZ05WSFJFRUpUQWpnaUZ0CmVXUmxkbWxqWldsa0xuRnBiM1F0Y0hKdmFtVmpkQzVuYVhSb2RXSXVhVzh3Q3dZRFZSMFBCQVFEQWdXZ01BMEcKQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUF3VERRMUthM2VQanVWL2J3dDM5OVpWK2MrZS9xaTZWMXRpR3JPNVVkbApPZUlmOU1vNEwwM2lHVHB1aHA1UG1CcnY3cjgrM3NGVGxidXBMNFFqRVZXTHliSGRaZGFFK3RuNCtBL2pQQ1lPClZHdno4OHZoRnlPOHNJT0pranVNZjFKcVMyMGlOVG5hdWJjVVJHeEtXTkdGd3dYQ3hHYm5WaW5laVpjc1M2UUwKd2tCbnhLWVZ3QW90bVlZZDFWK1pWN3dFWmpoakRGaXpXTW1tU0lMM0RWelF2VnFIejBGQWIzemkwNVM1YkJhdgoyYkZ2WGRvTXVqVC9KZU1WWlErQ3A1TDRZeHJxTitIOFBMaHlXQWE3aSt6TGN2U2J1OHVHTkxuZGxKeUZKcytwCkdVWWpLaU10QjRiZlBNeXhoQ254bzZoZnNIMGVrTFBxVU5lZEtRb0JKeVBrCi0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;code&gt;CertificateRequest&lt;/code&gt; will make cert-manager attempt to request the &lt;code&gt;Issuer&lt;/code&gt; &lt;code&gt;qiot-ca-sample&lt;/code&gt;.
The resource also exposes the option for stating the certificate as CA, Key Usages, and requested validity duration.
Successful issuance of the certificate signing request will cause an update to the resource, setting the status with the signed certificate, the CA of the certificate (if available), and setting the Ready condition to True,  whether the issuance of the certificate signing request was successful or no.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;registration-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#registration-service&quot;&gt;&lt;/a&gt;Registration Service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Registration Service is the entry point for each device that would like to send the data to our IoT platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The purpose is to register (of course) the device to the system with an identification number and provide the correct certificate to communicate with the MQTT Broker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Registration API is protected by Mutual TLS, which means that every device comes with a predefined certificate at provisioning time. This integration allows us an extra security layer that only the recognized device can register to the platform.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next part will look at Hashicorp Vault Integration, our choice for internal PKI Infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://cert-manager.io/&quot; class=&quot;bare&quot;&gt;https://cert-manager.io/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Mattia Mascia</name><email>mmascia@redhat.com</email></author><category term="blog" /><category term="security" /><category term="quarkus" /><category term="cert" /><category term="manager" /><category term="kubernetes" /><summary type="html">Intro</summary></entry><entry><title type="html">Quarkus native running on a Raspberry Pi</title><link href="/blog/quarkus-native-on-a-raspberry-pi/" rel="alternate" type="text/html" title="Quarkus native running on a Raspberry Pi" /><published>2021-03-17T00:00:00+00:00</published><updated>2021-03-17T00:00:00+00:00</updated><id>/blog/quarkus-native-on-a-raspberry-pi</id><content type="html" xml:base="/blog/quarkus-native-on-a-raspberry-pi/">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I&amp;#8217;ve been introduced to Quarkus, back in December 2018, I suddenly had the feeling the Quarkus runtime has the potential of covering ~95% of the software use-cases.
My friend Sanne demoed Quarkus on his laptop when the runtime was still in an alpha state, far from being the large, extended and mature framework everybody knows nowadays. And still, I could experience a new way of think, implement and deploy java apps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve been recently working on a Hackfest for Red Hat EMEA partners to spread awareness about the potential and the performance of the Quarkus framework. My main technical goal was to demonstrate Quarkus can run everywhere and thanks to its performance capabilities coming from the native compilation process it definitely is the runtime of choice for IoT devices (a.k.a. Far Edge).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To achieve the above goal, I’ve picked up a single-board computer with an integrated ARM-compatible central processing unit and made a Quarkus native app running into a container on top of a Linux based operating system. Here is how:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single-board computer:&lt;/strong&gt; The ARM-compatible CPU integrated into the single-board computer must support 64-bit mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operating system:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To make a Quarkus native container image run in a container, a 64-bit Linux OS is required;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The OS must support aarch64 CPUs, which leads us to the need for an aarch64-base distribution available for that OS;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nice to have: the target OS should fully support the target single-board computer.**&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Container technology:&lt;/strong&gt; surprise, surprise! an OCI standard container engine is compulsory to run containers on Linux :-)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build tools:&lt;/strong&gt; as per the large amount of resources required by the GraalVM to compile Quarkus in native mode, an additional we need an ARM server / Virtual machine to achieve that goal. The server should meet the following minimum requirements:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU: same ARM model as the one embedded in the target single-board computer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cores: 4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ram: 8Gb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disk space: 20Gb&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Container registry:&lt;/strong&gt; In order to be able to deploy onto the single-board computer the container image containing the Quarkus native app built in the ARM server, an account on a remote container registry is required.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;technology&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#technology&quot;&gt;&lt;/a&gt;Technology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;single-sensor-board&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#single-sensor-board&quot;&gt;&lt;/a&gt;Single-sensor board&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Choosing the target single-board computer model has been quite an easy task: I already had a Raspberry Pi meeting the requirements above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Model:&lt;/em&gt; Raspberry Pi 3 B+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;SOC:&lt;/em&gt; Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;CPU:&lt;/em&gt; 1.4GHz 64-bit quad-core ARM Cortex-A53 CPU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;RAM:&lt;/em&gt; 1GB LPDDR2 SDRAM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;WIFI:&lt;/em&gt; Dual-band 802.11ac wireless LAN (2.4GHz and 5GHz ) and Bluetooth 4.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Ethernet:&lt;/em&gt; Gigabit Ethernet over USB 2.0 (max 300 Mbps). Power-over-Ethernet support (with separate PoE HAT). Improved PXE network and USB mass-storage booting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Thermal management:&lt;/em&gt; Yes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Video:&lt;/em&gt; Yes – VideoCore IV 3D. Full-size HDMI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Audio:&lt;/em&gt; Yes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;USB 2.0:&lt;/em&gt; 4 ports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;GPIO:&lt;/em&gt; 40-pin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Power:&lt;/em&gt; 5V/2.5A DC power input&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Operating system support:&lt;/em&gt; Linux and Unix&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;os&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#os&quot;&gt;&lt;/a&gt;OS&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve tried a few operating system meeting the requirements listed above. The two possible solutions were Fedora Internet of Things Edition and Gentoo.
After some tests, I’ve picked up &lt;a href=&quot;https://iot.fedoraproject.org/&quot;&gt;Fedora IoT&lt;/a&gt; for the following reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Full, native support to 64-bit architecture (aarch64)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maturity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lifecycle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full support on RPi 3 B+&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;container-technology&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#container-technology&quot;&gt;&lt;/a&gt;Container technology&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This one has been an easy task as well: &lt;a href=&quot;https://podman.io/&quot;&gt;Podman&lt;/a&gt;. Podman is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. Containers can either be run as root or in rootless mode. Moreover, there’s no need for installing additional components/layers to Fedora IoT basic installation as the Podman container engine is already available in the OS distribution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, from a deeper technical perspective, due to the fact cgroups on fedora is now v2 using Docker would force you to appy several tweeks and to downgrade the cgroups versio to v1 in order to avoid getting warning and eventually failures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason why Podman is the contained of choice is very well explained in the following &lt;a href=&quot;https://podman.io/blogs/2019/10/29/podman-crun-f31.html&quot;&gt;article&lt;/a&gt;.
I&amp;#8217;m quoting the quick explanation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The crun command is the runtime the allows for cgroup V2 support and is supplied starting with Fedora 31. Other container systems use the runc runtime. However, runc only supports cgroup V1. The cgroup kernel feature allows you to allocate resources such as CPU time, network bandwidth and system memory to a container. Version 1 of cgroup only supports containers that are run by root, while version 2 supports containers that are run by root or a non-privileged user.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Rūmī
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output from the command &quot;podman info&quot; on the RPi related to the OCI runtime is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;...
ociRuntime:
    name: crun
    package: crun-0.14.1-4.fc32.aarch64
    path: /usr/bin/crun
    version: |-
      crun version 0.14.1
      commit: 598ea5e192ca12d4f6378217d3ab1415efeddefa
      spec: 1.0.0
      +SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +YAJL
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meaning the Podman version already included in Fedora IoT 31 and later fully supports cgroup v2 thanks to the fact it uses &quot;crun&quot; runtime rather than the classic &quot;runc&quot; runtime, embedded in the other linux distributions and in the fedora releases before v31.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;build-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#build-tools&quot;&gt;&lt;/a&gt;Build tools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are multiple ways of provisioning an aarch64 server shipped with enough resources to build quarkus in native mode nowadays:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spend a reasonable, but not small, budget to purchase a physical ARM server (don’t do this at home);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spend a very small budget to provision an ARM VM on the public cloud (fastest, recommended if you are not running a Linux os on your host);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provision a VM on your host machine using QEmu (cheapest);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Run QEmu within a container, emulating the quarkus container images (still under investigation and tests)&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I’m running Fedora Workstation on my desktop, I’ve picked up the 3rd option.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;container-registry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#container-registry&quot;&gt;&lt;/a&gt;Container registry&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The remote container registry of choice is &lt;a href=&quot;https://quay.io/&quot;&gt;Quay.io&lt;/a&gt;. More details about setting up the account created on quay.io will be shared in a dedicated section of this article.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;implementation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementation&quot;&gt;&lt;/a&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section will guide you through the following&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Setting up the VM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting up the RPi and Fedora IoT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connecting the container engine to the quay.io account&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compiling and deploying your Quarkus native app on Podman&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outcome&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-setting-up-the-vm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-setting-up-the-vm&quot;&gt;&lt;/a&gt;1. Setting up the VM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This goal can be achieved using VM technology based on QEmu.
QEmu plays an important role in this task, cause that’s the best upstream tool to use to make a virtual machine emulating the target cpu architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setup-a-virtual-machine-using-qemu&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setup-a-virtual-machine-using-qemu&quot;&gt;&lt;/a&gt;Setup a Virtual machine using QEmu&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a linux distro, the use of VMM (Virtual Machine Manager is highly recommended):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;$ sudo dnf groupinstall virtualization
$ sudo dnf install qemu-system-aarch64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The minimum requirements for the virtual machine are the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU: 4 cores &lt;strong&gt;Cortex-A53&lt;/strong&gt; (ARMv8) 64-bit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RAM: 8 GB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disk: 10Gb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Networking: bridge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS: Fedora Minimal (latest stable) - aarch64 (&lt;a href=&quot;https://download.fedoraproject.org/pub/fedora-secondary/releases/32/Spins/aarch64/images/Fedora-Minimal-32-1.6.aarch64.raw.xz&quot;&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime: GraalVM (latest) - aarch64  (&lt;a href=&quot;https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-linux-aarch64-20.2.0.tar.gz&quot;&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/quarkus-native-on-a-raspberry-pi/vm-cpu-config.png&quot; alt=&quot;vm cpu config&quot; width=&quot;100%&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a side note, please consider increasing the disk sizing of the VM in case you want to reuse it for additional builds and tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setup-the-graalvm-environment&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setup-the-graalvm-environment&quot;&gt;&lt;/a&gt;Setup the GraalVM environment&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On your VM, you will need GCC, and the glibc and zlib headers. Examples for common distributions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;$ sudo dnf install gcc glibc-devel zlib-devel libstdc++-static&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Install OpenJdk:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-sh hljs&quot; data-lang=&quot;sh&quot;&gt;$ sudo dnf install -y java-11-openjdk&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Download  the latest version of graalvm for your architecture (aarch64) from &lt;a href=&quot;https://github.com/graalvm/graalvm-ce-builds/releases&quot;&gt;here&lt;/a&gt; and unpack it.
Detailed instructions &lt;a href=&quot;https://www.graalvm.org/docs/getting-started-with-graalvm/linux/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Move the graalvm content into /usr/lib/graalvm and set the environment variables adding the following code snippet into /etc/profile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;#JAVA_HOME
JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.6.10-0.fc32.aarch64
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin
export JAVA_HOME
export PATH
#GRAALVM_HOME
GRAALVM_HOME=/usr/lib/graalvm/graalvm-ce-java11-19.3.1
PATH=$PATH:$HOME/bin:$GRAALVM_HOME/bin
export GRAALVM_HOME
export PATH

(Optional) Set the JAVA_HOME environment variable to the GraalVM installation directory.
export JAVA_HOME=${GRAALVM_HOME}
(Optional) Add the GraalVM bin directory to the path
export PATH=${GRAALVM_HOME}/bin:$PATH&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;...

#JAVA_HOME
JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.8.10-0.fc32.x86_64
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin
export JAVA_HOME
export PATH
#GRAALVM_HOME
GRAALVM_HOME=/usr/lib/graalvm/graalvm-ce-java11-20.2.0
PATH=$PATH:$HOME/bin:$GRAALVM_HOME/bin
export GRAALVM_HOME
export PATH
export JAVA_HOME=${GRAALVM_HOME}
export PATH=${GRAALVM_HOME}/bin:$PATH&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-setting-up-the-rpi-and-fedora-iot&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-setting-up-the-rpi-and-fedora-iot&quot;&gt;&lt;/a&gt;2. Setting up the RPi and Fedora IoT&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;download-the-latest-fedora-iot-distro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#download-the-latest-fedora-iot-distro&quot;&gt;&lt;/a&gt;Download the latest Fedora IoT distro&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Download the stable and fully supported version of Fedora IoT for Raspberry Pi from &lt;a href=&quot;https://dl.fedoraproject.org/pub/alt/iot/&quot;&gt;here&lt;/a&gt;. Pick up the raw image for aarch64.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;flash-the-operating-system-on-the-sd-card&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#flash-the-operating-system-on-the-sd-card&quot;&gt;&lt;/a&gt;Flash the operating system on the SD card&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;non-linux-os&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#non-linux-os&quot;&gt;&lt;/a&gt;Non-Linux OS&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not running any linux based OS on hour host, in order to easily, safely and quickly install the OS image on the MicroSD card I highly recommended to download the official Raspberry Imager tool from &lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot;&gt;here&lt;/a&gt;.
The Raspberry Pi Imager how-to can be found &lt;a href=&quot;https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/&quot;&gt;here&lt;/a&gt;.
The good news is that we have already gone through the creation of the ARM-based virtual machine, so you already have a linux distro to use to flash the Fedora IoT OS on the SD card!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;on-a-linux-distro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#on-a-linux-distro&quot;&gt;&lt;/a&gt;On a Linux distro&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fedora OS linux distro provides a tool that dramatically simplifies the task: fedora-arm-installer.
Let&amp;#8217;s add the tool to the OS:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ dnf install -y fedora-arm-installer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example of how to setup the DS card if you are running fedora:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ sudo fedora-arm-image-installer -y --image=/home/&amp;lt;&amp;lt;user_home&amp;gt;&amp;gt;/Fedora-IoT-32-20200429.0.aarch64.raw.xz --target=rpi3 --media=/dev/sde --resizefs --addkey=/home/&amp;lt;&amp;lt;user_home&amp;gt;&amp;gt;/.ssh/id_rsa.pub --norootpass --addconsole&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;please refer to the official tool guide to get additional insights about it.
The tool is described &lt;a href=&quot;https://docs.fedoraproject.org/en-US/iot/physical-device-setup/#_scripted_image_transfer_with_arm_image_installer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a side note, the resulting SD card will contain 3 partitions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;BIOS&lt;/em&gt; (U-Boot) - 1.1 Gb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Boot&lt;/em&gt; - 525 Mb&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Root&lt;/em&gt; - Occupies the remaining unallocated space in the SD card&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/assets/images/posts/quarkus-native-on-a-raspberry-pi/sd-card-partitions.png&quot; alt=&quot;sd card partitions&quot; width=&quot;100%&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;enabling-64bit-on-rpi-cpu&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enabling-64bit-on-rpi-cpu&quot;&gt;&lt;/a&gt;Enabling 64bit on RPi cpu&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the flashing operation has completed successfully, it&amp;#8217;s important to have a look at the config file of the operating system. edit the file &lt;em&gt;config.txt&lt;/em&gt; and make sure the section &lt;strong&gt;[all]&lt;/strong&gt; starts with the following key-value pairs:
arm_control=0x200, arm_64bit=1&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;e.g.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;...

# Default Fedora configs for all Raspberry Pi Revisions
[all]
# Put the RPi into 64 bit mode
arm_control=0x200
arm_64bit=1

...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;after-first-boot&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#after-first-boot&quot;&gt;&lt;/a&gt;After first boot&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following steps may not be necessary if you are happy with the fault keyboard layout or if you are connecting your RPi to the network with aLAN cable&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;keyboard-layout&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keyboard-layout&quot;&gt;&lt;/a&gt;Keyboard Layout&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Find your keymap of choice in the list obtained by issuing the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ localectl list-keymaps | grep your-locale&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And set it into the system config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ localectl set-keymap _map_&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;enable-internet-access-through-wifi-connection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enable-internet-access-through-wifi-connection&quot;&gt;&lt;/a&gt;Enable internet access through WiFi connection&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Get the list of available networks&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ nmcli device wifi list&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And connect to the Wi-Fi network of choice&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ nmcli device wifi connect SSID password PASSWORD&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;disable-firewall&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#disable-firewall&quot;&gt;&lt;/a&gt;Disable firewall&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only because it is a demo!!! :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ systemctl disable firewalld
$ systemctl stop firewalld&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;create-a-new-user-for-the-device&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-a-new-user-for-the-device&quot;&gt;&lt;/a&gt;Create a new user for the device&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to the fedora-arm-installer tool, we&amp;#8217;ve added out public key to the root user.
Using root user on a linux system is never a good idea or, let’s say, a good practice.
For this reason, we’re going to add a new administrative user with wheel privileges to our OS:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ useradd edge
$ passwd edge
$ usermod edge -a -G wheel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-connecting-the-container-engine-to-the-quay-io-account&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#3-connecting-the-container-engine-to-the-quay-io-account&quot;&gt;&lt;/a&gt;3. Connecting the container engine to the quay.io account&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you haven’t got it yet, create a free account on quay.io.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sign-into-quay-io&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sign-into-quay-io&quot;&gt;&lt;/a&gt;Sign into Quay.io&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To sign into Quay.io, execute the podman login quay.io command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: If you go to your Quay account settings you can create an encrypted password for more security.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ podman login quay.io
Username: myusername
Password: mypassword&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-compiling-and-deploying-your-quarkus-native-app-on-podman&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#4-compiling-and-deploying-your-quarkus-native-app-on-podman&quot;&gt;&lt;/a&gt;4. Compiling and deploying your Quarkus native app on Podman&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back on the VM side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;building-the-executable&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-the-executable&quot;&gt;&lt;/a&gt;Building the executable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You’ll need git to download the source code and execute it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ sudo dnf install -y git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clone the quarkus quickstarts repository and pick up the quarkus quickstart of choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ git clone https://github.com/quarkusio/quarkus-quickstarts.git ~/git/quarkus-quickstarts&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enter the root directory of the quickstart of choice (e.g. &lt;em&gt;getting-started&lt;/em&gt;) and start the build:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ ./mvnw package -Pnative&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The whole Maven process takes roughly 40 mins. Blease be aware that this could take longer in case of a sarvice with more features (i.e. importing and using more modules):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;[edge@localhost getting-started]$ ./mvnw package -Pnative
...
[INFO] --- quarkus-maven-plugin:1.8.1.Final:native-image (default) @ getting-started ---
[INFO] [org.jboss.threads] JBoss Threads version 3.1.1.Final
[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-native-image-source-jar/getting-started-1.0-SNAPSHOT-runner.jar
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-native-image-source-jar/getting-started-1.0-SNAPSHOT-runner.jar
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on GraalVM Version 20.2.0 (Java Version 11.0.8)
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] /usr/lib/graalvm/graalvm-ce-java11-20.2.0/bin/native-image -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\$BySpaceAndTime -H:+JNI -jar getting-started-1.0-SNAPSHOT-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http -H:NativeLinkerOption=-no-pie --no-server -H:-UseServiceLoaderFeature -H:+StackTrace getting-started-1.0-SNAPSHOT-runner
[getting-started-1.0-SNAPSHOT-runner:2012]    classlist:  82,587.50 ms,  0.96 GB
[getting-started-1.0-SNAPSHOT-runner:2012]        (cap):  25,485.45 ms,  0.96 GB
[getting-started-1.0-SNAPSHOT-runner:2012]        setup:  62,730.91 ms,  0.94 GB
15:15:03,073 INFO  [org.jbo.threads] JBoss Threads version 3.1.1.Final
[getting-started-1.0-SNAPSHOT-runner:2012]     (clinit):   9,087.82 ms,  2.24 GB
[getting-started-1.0-SNAPSHOT-runner:2012]   (typeflow): 392,638.79 ms,  2.24 GB
[getting-started-1.0-SNAPSHOT-runner:2012]    (objects): 300,849.30 ms,  2.24 GB
[getting-started-1.0-SNAPSHOT-runner:2012]   (features):   9,611.94 ms,  2.24 GB
[getting-started-1.0-SNAPSHOT-runner:2012]     analysis: 729,428.50 ms,  2.24 GB
[getting-started-1.0-SNAPSHOT-runner:2012]     universe:  37,544.86 ms,  2.24 GB
[getting-started-1.0-SNAPSHOT-runner:2012]      (parse): 135,120.27 ms,  2.24 GB
[getting-started-1.0-SNAPSHOT-runner:2012]     (inline): 314,244.72 ms,  3.25 GB
[getting-started-1.0-SNAPSHOT-runner:2012]    (compile): 817,352.63 ms,  4.08 GB
[getting-started-1.0-SNAPSHOT-runner:2012]      compile: 1,304,395.09 ms,  4.08 GB
[getting-started-1.0-SNAPSHOT-runner:2012]        image: 102,001.77 ms,  4.10 GB
[getting-started-1.0-SNAPSHOT-runner:2012]        write:  16,216.90 ms,  4.10 GB
[getting-started-1.0-SNAPSHOT-runner:2012]      [total]: 2,342,173.85 ms,  4.10 GB
[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Execute [objcopy, --strip-debug, /home/edge/quarkus-quickstarts/getting-started/target/getting-started-1.0-SNAPSHOT-runner]
[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 2394526ms
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  45:25 min
[INFO] Finished at: 2020-09-30T15:46:11+02:00
[INFO] ------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The native quarkus executable must be packaged into a container image in order to be able to run it on a container runtime. To achieve this goal, let’s ask the container runtime already installed into your VM to build the container image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ sudo podman build -f src/main/docker/Dockerfile.native -t quay.io/$myusername/quarkus-getting-started:1-aarch64 .&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Push the container image to the container registry of choice to share it with the edge device:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ sudo podman push quay.io/$myusername/quarkus-getting-started:1-aarch64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;deploying-the-executable&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#deploying-the-executable&quot;&gt;&lt;/a&gt;Deploying the executable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the RPi:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;$ sudo podman run -it --rm -p 8090:8080 --name quarkus-getting-started quay.io/$myusername/quarkus-getting-started:1-aarch64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;outcome&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#outcome&quot;&gt;&lt;/a&gt;Outcome&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This paragraph shows the outcome produced by the above steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;startupstop-time&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#startupstop-time&quot;&gt;&lt;/a&gt;Startup/Stop time:&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-none hljs&quot;&gt;[edge@localhost ~]$ sudo podman run -it --rm -p 8090:8080 --name quarkus-getting-started quay.io/abattagl/quarkus-getting-started:1-aarch64
Trying to pull quay.io/abattagl/quarkus-getting-started:1-aarch64...
Getting image source signatures
Copying blob d44f88e7704f done
Copying blob 8c4861605060 done
Copying blob c5a0fdbc0d7a done
Copying blob 5dd9a2ffef88 done
Copying config f08559ac50 done
Writing manifest to image destination
Storing signatures
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,&amp;lt; / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) getting-started 1.0-SNAPSHOT native (powered by Quarkus 1.8.1.Final) started in 0.055s. Listening on: http://0.0.0.0:8080
2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) Profile prod activated.
2020-10-01 08:49:34,566 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]
^C
2020-10-01 08:49:49,061 INFO  [io.quarkus] (Shutdown thread) getting-started stopped in 0.007s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application starts in 55 ms and stops in 7 ms. This is impressive if you consider the Quarkus native app is running on the RPi3 cpu (Please have another look at the cpu specs at the very beginning of this article)!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;memory-footprint&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#memory-footprint&quot;&gt;&lt;/a&gt;Memory footprint:&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following screenshot of the output of the &quot;top&quot; command on the RPi shows how cheap it is to run Quarkus native apps on top of the container technology:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-native-on-a-raspberry-pi/native-quarkus-getting-started-on-arm8-memory-footprint.png&quot; alt=&quot;native quarkus getting started on arm8 memory footprint&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Roughly 22 megs for a java-based application exposing a simple web page and a REST API!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;connecting-to-the-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#connecting-to-the-service&quot;&gt;&lt;/a&gt;Connecting to the service&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following screenshot shows the webpage served by the quarkus microservice running natively on podman installed in the RPi:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-native-on-a-raspberry-pi/native-quarkus-getting-started-on-arm8-web-page.png&quot; alt=&quot;native quarkus getting started on arm8 web page&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusions&quot;&gt;&lt;/a&gt;Conclusions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;big-picture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#big-picture&quot;&gt;&lt;/a&gt;Big Picture&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article reproduces the steps to compile and run a Quarkus native app on a Raspberry Pi cpu. This process is potentially valid for all the cpus belonging to the ARM v8 family, with some potential exceptions due to the fact the architecture of few ARM based cpus may differ from the standard one for that version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;building-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-tools&quot;&gt;&lt;/a&gt;Building tools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this PoC I&amp;#8217;ve used a QEmu-base VM. That promotes reusability, but it&amp;#8217;s still expensive in terms of usability (QEmu works like a charm on linux OS, but not on Windows and MacOS). As stated at the beginning of this article, a more flexible, portable and scalable solution still based on cpu emulation and container technology is under investiogation at the moment. That would help the delegation and scalability of build process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be aware that QEmu-based tools are still a workaround. GraalVM is missing the cross-compile feature and it will take a while to release it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quarkus-everywhere&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus-everywhere&quot;&gt;&lt;/a&gt;Quarkus everywhere&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s clear that Quarkus can potentially run everywhere. It is, of course, a matter of supportability from GraalVM to the underlying architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far I feel comfortable in stating that this is just the beginning and lots more features and capabilities are yet to come.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It would very nice to have a distribution of Mandrel for aarch64. Mandrel is aligned with the &lt;code&gt;native-image&lt;/code&gt; capabilities from GraalVM with OpenJDK and Red Hat Enterprise Linux libraries to improve maintainability. Looking forward to testing it ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Andrea Battaglia</name><email>abattagl@redhat.com</email></author><category term="blog" /><category term="armv8" /><category term="arm" /><category term="raspberrypi" /><category term="quarkus" /><category term="native" /><summary type="html">Intro</summary></entry><entry><title type="html">QIoT Hackfest @ Openshift tv - updates</title><link href="/blog/qiot-hackfest-at-openshift-tv-updates/" rel="alternate" type="text/html" title="QIoT Hackfest @ Openshift tv - updates" /><published>2021-01-31T00:00:00+00:00</published><updated>2021-01-31T00:00:00+00:00</updated><id>/blog/qiot-hackfest-at-openshift-tv-updates</id><content type="html" xml:base="/blog/qiot-hackfest-at-openshift-tv-updates/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our friends from the &lt;a href=&quot;https://www.openshift.com/streaming/twitch&quot;&gt;&lt;strong&gt;openshift tv&lt;/strong&gt;&lt;/a&gt; are always keen to know the latest and greatest on all this that gravitates around the &lt;a href=&quot;https://www.openshift.com/&quot;&gt;&lt;strong&gt;Openshift Container Platform&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Red Hat QIoT Hackfest event generated this amazing community attracting SMEs and a bunch of new technial and business opportunities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Watch the episode linked below to get an overview of the business strategy around the QIoT Hackfest!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/5l9kHb3qaxY?rel=0&amp;amp;start=373&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Andrea Battaglia</name><email>abattagl@redhat.com</email></author><category term="blog" /><category term="qiot" /><category term="media" /><category term="openshifttv" /><summary type="html">Our friends from the openshift tv are always keen to know the latest and greatest on all this that gravitates around the Openshift Container Platform.</summary></entry><entry><title type="html">Welcome</title><link href="/blog/announcement-welcome/" rel="alternate" type="text/html" title="Welcome" /><published>2020-12-01T00:00:00+00:00</published><updated>2020-12-01T00:00:00+00:00</updated><id>/blog/announcement-welcome</id><content type="html" xml:base="/blog/announcement-welcome/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A warm welcome to all the guests of the QIoT project community!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few months ago, back in November 2020, a small group of redhatters in love with opensource spotted the opportunity to create a forum to discuss about innovation, have fun and tackle technical and business challenges.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are seing this community growing organically and attracting more and more SMEs bringing new ideas and contribution to out PoCs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to have a look, investigate, test and leave a feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We look forward to have you joining the project!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;The QIoT team&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name>Andrea Battaglia</name><email>abattagl@redhat.com</email></author><category term="announcement" /><category term="announcement" /><summary type="html">A warm welcome to all the guests of the QIoT project community!</summary></entry><entry><title type="html">QIoT Hackfest Pilot @ Openshift tv</title><link href="/blog/qiot-hackfest-at-openshift-tv/" rel="alternate" type="text/html" title="QIoT Hackfest Pilot @ Openshift tv" /><published>2020-12-01T00:00:00+00:00</published><updated>2020-12-01T00:00:00+00:00</updated><id>/blog/qiot-hackfest-at-openshift-tv</id><content type="html" xml:base="/blog/qiot-hackfest-at-openshift-tv/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;QIoT Community&lt;/strong&gt; streams from a business initiative released and ran by Red Hat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This initiative has been piloted on Sep 2020 for 12 selected teams, each made up of 3-5 people, challenged to implement an Edge Computing solution using &lt;em&gt;enterprise&lt;/em&gt; and &lt;em&gt;opensource&lt;/em&gt; technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The top 3 teams have been awarded and invited to join us in a discussion hosted by &lt;a href=&quot;https://www.openshift.com/streaming/twitch&quot;&gt;&lt;strong&gt;openshift tv&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Watch the episode linked below to get an overview of the first draft of the QIoT project and the initial idea behind the QIoT Hackfest event!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/c7B7EohWYV4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Andrea Battaglia</name><email>abattagl@redhat.com</email></author><category term="blog" /><category term="qiot" /><category term="media" /><category term="openshifttv" /><summary type="html">The QIoT Community streams from a business initiative released and ran by Red Hat.</summary></entry></feed>